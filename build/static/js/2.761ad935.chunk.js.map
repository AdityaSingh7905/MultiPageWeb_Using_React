{"version":3,"sources":["components/hooks/use-http.js","components/lib/api.js","components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetails.js"],"names":["httpReducer","state","action","type","data","error","status","responseData","errorMessage","useHttp","requestFunction","startWithPending","arguments","length","undefined","httpState","dispatch","useReducer","sendRequest","useCallback","async","requestData","message","FIREBASE_DOMAIN","getAllQuotes","response","fetch","concat","json","ok","Error","transformedQuotes","key","quoteObj","id","push","getSingleQuote","quoteId","addQuote","quoteData","method","body","JSON","stringify","headers","addComment","commentData","commentId","name","getAllComments","transformedComments","commentObj","module","exports","NewCommentForm","props","commentTextRef","useRef","onAddComment","useEffect","submitFormHandler","event","preventDefault","commentText","current","value","console","log","text","_jsxs","className","classes","form","onSubmit","children","_jsx","LoadingSpinner","control","htmlFor","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","isAddingComment","setIsAddingComment","useState","loadedComments","addCommentHandler","onClick","startAddCommentHandler","HighlightedQuote","quote","author","QuoteDetails","params","useParams","loadedQuote","Fragment","Routes","Route","path","element","Link","to"],"mappings":"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","file":"static/js/2.761ad935.chunk.js","sourcesContent":["import { useReducer, useCallback } from 'react';\n\nfunction httpReducer(state, action) {\n  if (action.type === 'SEND') {\n    return {\n      data: null,\n      error: null,\n      status: 'pending',\n    };\n  }\n\n  if (action.type === 'SUCCESS') {\n    return {\n      data: action.responseData,\n      error: null,\n      status: 'completed',\n    };\n  }\n\n  if (action.type === 'ERROR') {\n    return {\n      data: null,\n      error: action.errorMessage,\n      status: 'completed',\n    };\n  }\n\n  return state;\n}\n\nfunction useHttp(requestFunction, startWithPending = false) {\n  const [httpState, dispatch] = useReducer(httpReducer, {\n    status: startWithPending ? 'pending' : null,\n    data: null,\n    error: null,\n  });\n\n  const sendRequest = useCallback(\n    async function (requestData) {\n      dispatch({ type: 'SEND' });\n      try {\n        const responseData = await requestFunction(requestData);\n        dispatch({ type: 'SUCCESS', responseData });\n      } catch (error) {\n        dispatch({\n          type: 'ERROR',\n          errorMessage: error.message || 'Something went wrong!',\n        });\n      }\n    },\n    [requestFunction]\n  );\n\n  return {\n    sendRequest,\n    ...httpState,\n  };\n}\n\nexport default useHttp;\n","const FIREBASE_DOMAIN = 'https://react-http-b5b2d-default-rtdb.firebaseio.com';\n\nexport async function getAllQuotes() {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  const transformedQuotes = [];\n\n  for (const key in data) {\n    const quoteObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedQuotes.push(quoteObj);\n  }\n\n  return transformedQuotes;\n}\n\nexport async function getSingleQuote(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quote.');\n  }\n\n  const loadedQuote = {\n    id: quoteId,\n    ...data,\n  };\n\n  return loadedQuote;\n}\n\nexport async function addQuote(quoteData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\n    method: 'POST',\n    body: JSON.stringify(quoteData),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not create quote.');\n  }\n\n  return null;\n}\n\nexport async function addComment(requestData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${requestData.quoteId}.json`, {\n    method: 'POST',\n    body: JSON.stringify(requestData.commentData),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not add comment.');\n  }\n\n  return { commentId: data.name };\n}\n\nexport async function getAllComments(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not get comments.');\n  }\n\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedComments.push(commentObj);\n  }\n\n  return transformedComments;\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__2huJU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__tum2z\",\"loading\":\"NewCommentForm_loading__2LqIv\",\"control\":\"NewCommentForm_control__EuAvC\",\"actions\":\"NewCommentForm_actions__1mQne\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__2eg18\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__1zyEZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__3YXSB\"};","import { useEffect, useRef } from \"react\";\n\nimport classes from \"./NewCommentForm.module.css\";\nimport useHttp from \"../hooks/use-http\";\nimport { addComment } from \"../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  const { quoteId, onAddComment } = props;\n\n  useEffect(() => {\n    if (status === \"completed\" && !error) {\n      onAddComment();\n    }\n  }, [status, error, onAddComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    // optional: Could validate here\n\n    // send comment to server\n    const commentText = commentTextRef.current.value;\n    console.log(commentText);\n\n    const commentObj = {\n      quoteId: quoteId,\n      commentData: {\n        text : commentText\n      },\n    };\n    sendRequest(commentObj);\n\n    commentTextRef.current.value = \"\";\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from \"react\";\nimport useHttp from \"../hooks/use-http\";\nimport { getAllComments } from \"../lib/api\";\n\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport CommentsList from \"./CommentsList\";\n\nconst Comments = (props) => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const {\n    sendRequest,\n    status,\n    data: loadedComments,\n    error,\n  } = useHttp(getAllComments);\n\n  const { quoteId } = props;\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  },[sendRequest, quoteId]);\n\n  let comments;\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n  if (error) {\n    comments = <div className=\"centered focused\">{error}</div>;\n  }\n  if (status === \"completed\" && (loadedComments && loadedComments.length > 0)) {\n    console.log(loadedComments);\n    comments = <CommentsList comments={loadedComments} />;\n  }\n  if (\n    status === \"completed\" &&\n    (!loadedComments || loadedComments.length === 0)\n  ) {\n    comments = <p>No comments yet!!</p>;\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={props.quoteId}\n          onAddComment={addCommentHandler}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { Routes, Route, Link } from \"react-router-dom\";\r\nimport { Fragment, useEffect } from \"react\";\r\nimport { useParams} from \"react-router-dom\";\r\nimport Comments from \"../components/comments/Comments\";\r\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\r\nimport useHttp from \"../components/hooks/use-http\";\r\nimport { getSingleQuote } from \"../components/lib/api\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\n\r\nconst QuoteDetails = () => {\r\n  const params = useParams();\r\n  const {sendRequest, status, data : loadedQuote, error} = useHttp(getSingleQuote, true);\r\n\r\n  const { quoteId} = params;\r\n\r\n  useEffect(() => {\r\n    sendRequest(quoteId)\r\n  }, [sendRequest,quoteId]);\r\n\r\n  if(status === 'pending'){\r\n    return <div className=\"centered\">\r\n      <LoadingSpinner />\r\n    </div>\r\n  }\r\n\r\n  if(error){\r\n    return <div className=\"centered focused\">{error}</div>\r\n  }\r\n\r\n  if(!loadedQuote.text){\r\n    return <p>No Quote Found!!</p>\r\n  }\r\n \r\n\r\n  return (\r\n    <Fragment>\r\n      <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\r\n      <Routes>\r\n        <Route path='/' element={<div className=\"centered\">\r\n        <Link className=\"btn--flat\" to={`/quotes/${params.quoteId}/comments`}>\r\n          Load Comments...\r\n        </Link>\r\n      </div>} />\r\n        <Route path=\"comments\" element={<Comments quoteId={params.quoteId}/>} />\r\n      </Routes>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default QuoteDetails;\r\n"],"sourceRoot":""}