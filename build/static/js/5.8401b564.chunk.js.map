{"version":3,"sources":["components/hooks/use-http.js","components/lib/api.js","components/UI/Card.module.css","components/quotes/QuoteForm.module.css","components/UI/Blocker.module.css","components/UI/Card.js","components/UI/Blocker.js","components/quotes/QuoteForm.js","pages/NewQuote.js"],"names":["httpReducer","state","action","type","data","error","status","responseData","errorMessage","useHttp","requestFunction","startWithPending","arguments","length","undefined","httpState","dispatch","useReducer","sendRequest","useCallback","async","requestData","message","FIREBASE_DOMAIN","getAllQuotes","response","fetch","concat","json","ok","Error","transformedQuotes","key","quoteObj","id","push","getSingleQuote","quoteId","addQuote","quoteData","method","body","JSON","stringify","headers","addComment","commentData","commentId","name","getAllComments","transformedComments","commentObj","module","exports","Card","props","_jsx","className","classes","card","children","Blocker","blocker","useBlocker","_ref","currentLocation","nextLocation","isFocus","pathname","Fragment","_jsxs","block","onClick","proceed","reset","QuoteForm","setIsFocus","useState","enteredAuthor","setEnteredAuthor","authorBlur","setAuthorBlur","enteredText","setEnteredText","textBlur","setTextBlur","authorIsInvalid","trim","authorError","textIsInvalid","textError","formIsValid","onFocus","focusHandler","form","onSubmit","event","preventDefault","onAddQuote","author","text","isLoading","loading","LoadingSpinner","control","htmlFor","value","onChange","target","onBlur","rows","actions","disabled","focusChangeHandler","NewQuote","navigate","useNavigate","useEffect","quote"],"mappings":"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","file":"static/js/5.8401b564.chunk.js","sourcesContent":["import { useReducer, useCallback } from 'react';\n\nfunction httpReducer(state, action) {\n  if (action.type === 'SEND') {\n    return {\n      data: null,\n      error: null,\n      status: 'pending',\n    };\n  }\n\n  if (action.type === 'SUCCESS') {\n    return {\n      data: action.responseData,\n      error: null,\n      status: 'completed',\n    };\n  }\n\n  if (action.type === 'ERROR') {\n    return {\n      data: null,\n      error: action.errorMessage,\n      status: 'completed',\n    };\n  }\n\n  return state;\n}\n\nfunction useHttp(requestFunction, startWithPending = false) {\n  const [httpState, dispatch] = useReducer(httpReducer, {\n    status: startWithPending ? 'pending' : null,\n    data: null,\n    error: null,\n  });\n\n  const sendRequest = useCallback(\n    async function (requestData) {\n      dispatch({ type: 'SEND' });\n      try {\n        const responseData = await requestFunction(requestData);\n        dispatch({ type: 'SUCCESS', responseData });\n      } catch (error) {\n        dispatch({\n          type: 'ERROR',\n          errorMessage: error.message || 'Something went wrong!',\n        });\n      }\n    },\n    [requestFunction]\n  );\n\n  return {\n    sendRequest,\n    ...httpState,\n  };\n}\n\nexport default useHttp;\n","const FIREBASE_DOMAIN = 'https://react-http-b5b2d-default-rtdb.firebaseio.com';\n\nexport async function getAllQuotes() {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  const transformedQuotes = [];\n\n  for (const key in data) {\n    const quoteObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedQuotes.push(quoteObj);\n  }\n\n  return transformedQuotes;\n}\n\nexport async function getSingleQuote(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quote.');\n  }\n\n  const loadedQuote = {\n    id: quoteId,\n    ...data,\n  };\n\n  return loadedQuote;\n}\n\nexport async function addQuote(quoteData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\n    method: 'POST',\n    body: JSON.stringify(quoteData),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not create quote.');\n  }\n\n  return null;\n}\n\nexport async function addComment(requestData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${requestData.quoteId}.json`, {\n    method: 'POST',\n    body: JSON.stringify(requestData.commentData),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not add comment.');\n  }\n\n  return { commentId: data.name };\n}\n\nexport async function getAllComments(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not get comments.');\n  }\n\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedComments.push(commentObj);\n  }\n\n  return transformedComments;\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__7XY5c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__2EbQ_\",\"loading\":\"QuoteForm_loading__2iz7a\",\"control\":\"QuoteForm_control__3bQJF\",\"actions\":\"QuoteForm_actions__3lHFs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"Blocker_block__13Ft4\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","import { Fragment } from \"react\";\r\nimport { useBlocker } from \"react-router-dom\";\r\nimport classes from \"./Blocker.module.css\";\r\nconst Blocker = (props) => {\r\n  const blocker = useBlocker(\r\n    ({ currentLocation, nextLocation }) =>\r\n      props.isFocus !== false &&\r\n      currentLocation.pathname !== nextLocation.pathname\r\n  );\r\n\r\n  // unstable_usePrompt({\r\n  //   message: \"Are you sure want to exit?? Your all data will be lost!!\",\r\n  //   when: (location) => isFocus === true,\r\n  // });\r\n\r\n  return (\r\n    <Fragment>\r\n      {blocker.state === \"blocked\" ? (\r\n          <div className={classes.block}>\r\n            <p>Are you sure you want to leave?</p>\r\n            <button onClick={() => blocker.proceed()}>Proceed</button>\r\n            <button onClick={() => blocker.reset()}>Cancel</button>\r\n          </div>\r\n      ) : null}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Blocker;\r\n","import { Fragment, useState } from \"react\";\n\nimport Card from \"../UI/Card\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./QuoteForm.module.css\";\nimport Blocker from \"../UI/Blocker\";\n\nconst QuoteForm = (props) => {\n  const [isFocus, setIsFocus] = useState(false);\n  const [enteredAuthor, setEnteredAuthor] = useState(\"\");\n  const [authorBlur, setAuthorBlur] = useState(false);\n\n  const [enteredText, setEnteredText] = useState(\"\");\n  const [textBlur, setTextBlur] = useState(false);\n\n  const authorIsInvalid = enteredAuthor.trim().length === 0;\n  const authorError = authorIsInvalid && authorBlur;\n\n  const textIsInvalid = enteredText.trim().length === 0;\n  const textError = textIsInvalid && textBlur;\n\n  let formIsValid = false;\n  if (!authorIsInvalid && !textIsInvalid) {\n    formIsValid = true;\n  }\n\n  const focusHandler = () => {\n    setIsFocus(true);\n  };\n\n  const focusChangeHandler = () => {\n    setIsFocus(false);\n  };\n\n  const authorChangeHandler = (event) => {\n    setEnteredAuthor(event.target.value);\n  };\n\n  const authorBlurHandler = (event) => {\n    setAuthorBlur(true);\n  };\n\n  const textChangeHandler = (event) => {\n    setEnteredText(event.target.value);\n  };\n\n  const textBlurHandler = (event) => {\n    setTextBlur(true);\n  };\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n\n    // optional: Could validate here\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\n    // setEnteredAuthor('');\n    // setEnteredText('');\n    // setAuthorBlur(false);\n    // setTextBlur(false);\n  }\n\n  return (\n    <Fragment>\n      <Blocker isFocus={isFocus} />\n      <Card>\n        <form\n          onFocus={focusHandler}\n          className={classes.form}\n          onSubmit={submitFormHandler}\n        >\n          {props.isLoading && (\n            <div className={classes.loading}>\n              <LoadingSpinner />\n            </div>\n          )}\n\n          <div className={classes.control}>\n            <label htmlFor=\"author\">Author</label>\n            <input\n              type=\"text\"\n              id=\"author\"\n              value={enteredAuthor}\n              onChange={authorChangeHandler}\n              onBlur={authorBlurHandler}\n            />\n            { authorError && <p>Please enter a valid text.</p>}\n          </div>\n          <div className={classes.control}>\n            <label htmlFor=\"text\">Text</label>\n            <textarea\n              id=\"text\"\n              rows=\"5\"\n              value={enteredText}\n              onChange={textChangeHandler}\n              onBlur={textBlurHandler}\n            ></textarea>\n            { textError && <p>Please enter a valid text.</p>}\n          </div>\n          <div className={classes.actions}>\n            <button\n              disabled={!formIsValid}\n              onClick={focusChangeHandler}\n              className=\"btn\"\n            >\n              Add Quote\n            </button>\n          </div>\n        </form>\n      </Card>\n    </Fragment>\n  );\n};\n\nexport default QuoteForm;\n","import { useNavigate } from \"react-router-dom\";\r\nimport QuoteForm from \"../components/quotes/QuoteForm\";\r\nimport { addQuote } from \"../components/lib/api\";\r\nimport useHttp from \"../components/hooks/use-http\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst NewQuote = () => {\r\n  const navigate = useNavigate();\r\n  const { sendRequest, status } = useHttp(addQuote);\r\n\r\n  useEffect(() => {\r\n    if (status === \"completed\") {\r\n      navigate(\"/quotes\");\r\n    }\r\n  }, [status, navigate]);\r\n\r\n  const addQuoteHandler = (quote) => {\r\n    sendRequest(quote);\r\n  };\r\n\r\n  return <QuoteForm onAddQuote={addQuoteHandler} />;\r\n};\r\n\r\nexport default NewQuote;\r\n"],"sourceRoot":""}